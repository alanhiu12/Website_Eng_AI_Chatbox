{"ast":null,"code":"var _jsxFileName = \"D:\\\\LearningAI\\\\learnlinguaai\\\\src\\\\ChatbotPage.js\",\n  _s = $RefreshSig$();\n// src/ChatbotPage.js\nimport React, { useState } from 'react';\nimport ChatInput from './components/ChatInput';\nimport ChatBox from './components/ChatBox';\nimport './ChatbotPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatbotPage = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n\n  // Simulate API response for now (You will replace this with actual API call)\n  const sendMessageToChatbot = async message => {\n    const newMessage = {\n      sender: 'user',\n      text: message\n    };\n    setMessages([...messages, newMessage]);\n\n    // Simulate chatbot response (This should come from the chatbot API)\n    const response = await simulateChatbotResponse(message);\n    setMessages(prevMessages => [...prevMessages, response]);\n  };\n\n  // Simulate a chatbot response (this function will be replaced with a real API call)\n  const simulateChatbotResponse = message => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          sender: 'bot',\n          text: `Chatbot phản hồi: ${message}`,\n          audio: 'https://example.com/audio.mp3' // Replace with actual audio URL from API\n        });\n      }, 1000);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-page\",\n    children: [/*#__PURE__*/_jsxDEV(ChatBox, {\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      onSubmit: sendMessageToChatbot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatbotPage, \"dxxfFX7fiXmC0h9Fk+B7I5VonqM=\");\n_c = ChatbotPage;\nexport default ChatbotPage;\nvar _c;\n$RefreshReg$(_c, \"ChatbotPage\");","map":{"version":3,"names":["React","useState","ChatInput","ChatBox","jsxDEV","_jsxDEV","ChatbotPage","_s","messages","setMessages","sendMessageToChatbot","message","newMessage","sender","text","response","simulateChatbotResponse","prevMessages","Promise","resolve","setTimeout","audio","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["D:/LearningAI/learnlinguaai/src/ChatbotPage.js"],"sourcesContent":["// src/ChatbotPage.js\r\nimport React, { useState } from 'react';\r\nimport ChatInput from './components/ChatInput';\r\nimport ChatBox from './components/ChatBox';\r\nimport './ChatbotPage.css';\r\n\r\nconst ChatbotPage = () => {\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  // Simulate API response for now (You will replace this with actual API call)\r\n  const sendMessageToChatbot = async (message) => {\r\n    const newMessage = { sender: 'user', text: message };\r\n    setMessages([...messages, newMessage]);\r\n\r\n    // Simulate chatbot response (This should come from the chatbot API)\r\n    const response = await simulateChatbotResponse(message);\r\n    setMessages((prevMessages) => [...prevMessages, response]);\r\n  };\r\n\r\n  // Simulate a chatbot response (this function will be replaced with a real API call)\r\n  const simulateChatbotResponse = (message) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          sender: 'bot',\r\n          text: `Chatbot phản hồi: ${message}`,\r\n          audio: 'https://example.com/audio.mp3',  // Replace with actual audio URL from API\r\n        });\r\n      }, 1000);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-page\">\r\n      <ChatBox messages={messages} />\r\n      <ChatInput onSubmit={sendMessageToChatbot} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatbotPage;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,MAAMS,oBAAoB,GAAG,MAAOC,OAAO,IAAK;IAC9C,MAAMC,UAAU,GAAG;MAAEC,MAAM,EAAE,MAAM;MAAEC,IAAI,EAAEH;IAAQ,CAAC;IACpDF,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEI,UAAU,CAAC,CAAC;;IAEtC;IACA,MAAMG,QAAQ,GAAG,MAAMC,uBAAuB,CAACL,OAAO,CAAC;IACvDF,WAAW,CAAEQ,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEF,QAAQ,CAAC,CAAC;EAC5D,CAAC;;EAED;EACA,MAAMC,uBAAuB,GAAIL,OAAO,IAAK;IAC3C,OAAO,IAAIO,OAAO,CAAEC,OAAO,IAAK;MAC9BC,UAAU,CAAC,MAAM;QACfD,OAAO,CAAC;UACNN,MAAM,EAAE,KAAK;UACbC,IAAI,EAAE,qBAAqBH,OAAO,EAAE;UACpCU,KAAK,EAAE,+BAA+B,CAAG;QAC3C,CAAC,CAAC;MACJ,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ,CAAC;EAED,oBACEhB,OAAA;IAAKiB,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC3BlB,OAAA,CAACF,OAAO;MAACK,QAAQ,EAAEA;IAAS;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC/BtB,OAAA,CAACH,SAAS;MAAC0B,QAAQ,EAAElB;IAAqB;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEV,CAAC;AAACpB,EAAA,CAhCID,WAAW;AAAAuB,EAAA,GAAXvB,WAAW;AAkCjB,eAAeA,WAAW;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}