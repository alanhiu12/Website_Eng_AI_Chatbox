{"ast":null,"code":"var _jsxFileName = \"D:\\\\LearningAI\\\\learnlinguaai\\\\src\\\\pages\\\\ChatbotPage.js\",\n  _s = $RefreshSig$();\n// src/Chatbot.js\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './css/ChatbotPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const handleSend = async () => {\n    if (input.trim()) {\n      // Thêm tin nhắn của người dùng\n      setMessages(prevMessages => [...prevMessages, {\n        text: input,\n        sender: 'user'\n      }]);\n      try {\n        // Gửi yêu cầu đến API ChatGPT\n        const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n          model: 'gpt-3.5-turbo',\n          // hoặc 'gpt-4' nếu bạn có quyền truy cập\n          messages: [{\n            role: 'user',\n            content: input\n          }]\n        }, {\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer YOUR_API_KEY` // Thay thế YOUR_API_KEY bằng khóa API của bạn\n          }\n        });\n        const botMessage = response.data.choices[0].message.content;\n\n        // Thêm phản hồi của chatbot\n        setMessages(prevMessages => [...prevMessages, {\n          text: botMessage,\n          sender: 'chatbot'\n        }]);\n      } catch (error) {\n        console.error('Error fetching data from API:', error);\n      }\n      setInput('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: message.sender,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"HDAtGPGcvWga1zf1TBXg51T+tsc=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","handleSend","trim","prevMessages","text","sender","response","post","model","role","content","headers","botMessage","data","choices","message","error","console","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/LearningAI/learnlinguaai/src/pages/ChatbotPage.js"],"sourcesContent":["// src/Chatbot.js\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './css/ChatbotPage.css';\n\nconst Chatbot = () => {\n    const [messages, setMessages] = useState([]);\n    const [input, setInput] = useState('');\n\n    const handleSend = async () => {\n        if (input.trim()) {\n            // Thêm tin nhắn của người dùng\n            setMessages((prevMessages) => [\n                ...prevMessages,\n                { text: input, sender: 'user' },\n            ]);\n\n            try {\n                // Gửi yêu cầu đến API ChatGPT\n                const response = await axios.post(\n                    'https://api.openai.com/v1/chat/completions',\n                    {\n                        model: 'gpt-3.5-turbo', // hoặc 'gpt-4' nếu bạn có quyền truy cập\n                        messages: [{ role: 'user', content: input }],\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': `Bearer YOUR_API_KEY`, // Thay thế YOUR_API_KEY bằng khóa API của bạn\n                        },\n                    }\n                );\n\n                const botMessage = response.data.choices[0].message.content;\n\n                // Thêm phản hồi của chatbot\n                setMessages((prevMessages) => [\n                    ...prevMessages,\n                    { text: botMessage, sender: 'chatbot' },\n                ]);\n            } catch (error) {\n                console.error('Error fetching data from API:', error);\n            }\n            setInput('');\n        }\n    };\n\n    return (\n        <div className=\"chatbot-container\">\n            <div className=\"chatbot-messages\">\n                {messages.map((message, index) => (\n                    <div key={index} className={message.sender}>\n                        {message.text}\n                    </div>\n                ))}\n            </div>\n            <div className=\"chatbot-input\">\n                <input\n                    type=\"text\"\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                    placeholder=\"Type your message...\"\n                />\n                <button onClick={handleSend}>Send</button>\n            </div>\n        </div>\n    );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}